{"version":3,"sources":["utils.js","OneByOne.js","ManyByOne.js","App.js","serviceWorker.js","index.js"],"names":["dice","getValFromArr","arr","minNum","maxNum","length","parseInt","Math","random","roll","num","i","push","getFraction","numerator","denominator","Fraction","fraction","toFraction","d","a","b","e","num1","num2","appointment","gcd","OneByOne","start","timer","setInterval","run","val","state","result","count","step","newCount","next","slice","every","item","setState","stop","clearInterval","this","className","onClick","style","width","float","textAlign","reverse","map","index","key","React","Component","ManyByOne","Jitem","Jindex","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOACMA,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAQvBC,EAAgB,SAACC,GACnB,OAAOA,GALQC,EAKM,EALEC,EAKCF,EAAIG,OAAS,EAJ9BC,SAASC,KAAKC,UAAYJ,EAASD,EAAS,GAAKA,EAAQ,MADlD,IAACA,EAAQC,GAQrBK,EAAO,WAAc,IAAbC,EAAY,uDAAN,EAChB,IAAKA,EACD,OAAO,EAEX,GAAY,IAARA,EACA,OAAOT,EAAcD,GAEzB,GAAIU,EAAM,EAAG,CAET,IADA,IAAIR,EAAM,GACDS,EAAI,EAAGA,EAAID,EAAKC,IACrBT,EAAIU,KAAKX,EAAcD,IAE3B,OAAOE,IAITW,EAAc,SAACC,EAAWC,GAG5B,OAFAC,EAASC,SAASH,EAAWC,GAC7BC,EAASE,aACFF,EAASG,GAEhBH,EAAW,CACXI,EAAG,EACHC,EAAG,EACHF,EAAG,GACHG,EAAG,EACHL,SAAU,SAAUM,EAAMC,GACtBR,EAASI,EAAIG,EACbP,EAASK,EAAIG,EACbR,EAASS,eAEbC,IAAK,SAAUN,EAAGC,GAEd,OAAa,IAANA,EAAUD,EAAIJ,EAASU,IAAIL,EAAGD,EAAIC,IAE7CI,YAAa,WAEU,IAAfT,EAASI,GAA0B,IAAfJ,EAASK,IACjCL,EAASM,EAAIN,EAASU,IAAIV,EAASI,EAAGJ,EAASK,GAC/CL,EAASI,GAAKJ,EAASM,EACvBN,EAASK,GAAKL,EAASM,IAE3BJ,WAAY,WACRF,EAASG,EAAIH,EAASI,EAAI,IAAMJ,EAASK,ICiClCM,E,kDArFX,aAAe,IAAD,8BACV,gBASJC,MAAQ,WACJ,EAAKC,MAAQC,aAAY,WACrB,EAAKC,UAZC,EAedA,IAAM,WACF,IAAMC,EAAMvB,IADJ,EAEwB,EAAKwB,MAA7BC,EAFA,EAEAA,OAAQC,EAFR,EAEQA,MAAOC,EAFf,EAEeA,KACnBC,EAAWF,EACTG,EAAI,CAAIN,GAAJ,mBAAYE,IAClBA,EAAO7B,SACGiC,EAAKC,MAAM,EAAGH,GAETI,OAAM,SAACC,GAAD,OAAmB,IAATA,MACrBJ,KAEd,EAAKK,SAAS,CACVR,OAAQI,EACRH,MAAOE,KA5BD,EA+BdM,KAAO,WACC,EAAKd,QACLe,cAAc,EAAKf,OACnB,EAAKA,MAAQ,OAhCjB,EAAKI,MAAQ,CACTC,OAAQ,GACRC,MAAO,EACPC,KAAM,GAEV,EAAKP,MAAQ,KAPH,E,mEAsCVgB,KAAKF,S,+BAGC,IAAD,EAC2BE,KAAKZ,MAA7BC,EADH,EACGA,OAAQC,EADX,EACWA,MAAOC,EADlB,EACkBA,KACvB,OACI,yBAAKU,UAAU,iBACX,yBAAKC,QAASF,KAAKjB,OAAnB,SACA,yBAAKmB,QAASF,KAAKF,MAAnB,QACA,4CAAQT,EAAO7B,OAAf,sBACA,4CACO+B,EADP,4BACkBD,GAElB,6BACI,yBACIa,MAAO,CACHC,MAAO,MACPC,MAAO,OACPC,UAAW,UAJnB,eAOOf,EAPP,6BASA,yBACIY,MAAO,CACHC,MAAO,MACPC,MAAO,QACPC,UAAW,SAGdtC,EAAYsB,EAAOD,EAAO7B,UAGnC,4BACK6B,EAAOkB,UAAUC,KAAI,SAACZ,EAAMa,GACzB,OACI,wBAAIR,UAAU,OAAOS,IAAKD,GACrBb,Y,GA5EVe,IAAMC,WC0FdC,E,kDAzFX,aAAe,IAAD,8BACV,gBAUJ9B,MAAQ,WACJ,EAAKC,MAAQC,aAAY,WACrB,EAAKC,UAbC,EAgBdA,IAAM,WAAO,IAAD,EACwB,EAAKE,MAA7BC,EADA,EACAA,OAAQC,EADR,EACQA,MAAOC,EADf,EACeA,KACjBJ,EAAMvB,EAAK2B,GACbC,EAAWF,EACTG,EAAI,CAAIN,GAAJ,mBAAYE,IAClBA,EAAO7B,SAEI2B,EAAIQ,OAAM,SAACC,GAAD,OAAmB,IAATA,MACrBJ,KAEd,EAAKK,SAAS,CACVR,OAAQI,EACRH,MAAOE,KA5BD,EA+BdM,KAAO,WACC,EAAKd,QACLe,cAAc,EAAKf,OACnB,EAAKA,MAAQ,OAhCjB,EAAKI,MAAQ,CACTC,OAAQ,GACRC,MAAO,EAEPC,KAAM,GAEV,EAAKP,MAAQ,KARH,E,mEAsCVgB,KAAKF,S,+BAGC,IAAD,EAC2BE,KAAKZ,MAA7BC,EADH,EACGA,OAAQC,EADX,EACWA,MAAOC,EADlB,EACkBA,KACvB,OACI,yBAAKU,UAAU,mBACX,yBAAKC,QAASF,KAAKjB,OAAnB,SACA,yBAAKmB,QAASF,KAAKF,MAAnB,QACA,4CAAQT,EAAO7B,OAAf,sBACA,6BACK+B,EADL,oDACoBD,GAEpB,6BACI,yBACIa,MAAO,CACHC,MAAO,MACPC,MAAO,OACPC,UAAW,UAGdf,EAPL,qDASA,yBACIY,MAAO,CACHC,MAAO,MACPC,MAAO,QACPC,UAAW,SAGdtC,EAAYsB,EAAOD,EAAO7B,UAGnC,4BACK6B,EAAOkB,UAAUC,KAAI,SAACZ,EAAMa,GACzB,OACI,wBAAIR,UAAU,OAAOS,IAAKD,GAA1B,IAEKb,EAAKY,KAAI,SAACM,EAAMC,GACb,OAAO,0BAAML,IAAKK,GAASD,MAHnC,c,GA3EJH,IAAMC,WCuBfI,G,wDApBX,aAAe,IAAD,8BACV,gBACK5B,MAAQ,CACTC,OAAQ,GACRC,MAAO,GAEX,EAAKN,MAAQ,KANH,E,qDASJ,IAAD,EACqBgB,KAAKZ,MAD1B,EACGC,OADH,EACWC,MAChB,OACI,yBAAKW,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAfEU,IAAMC,YCOJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.530b3b7a.chunk.js","sourcesContent":["// 用数组模仿骰子\nconst dice = [1, 2, 3, 4, 5, 6];\n//连续两次6的概率 -- 1/42\n\n// 从一个范围内取随机整数\nconst randomNum = (minNum, maxNum) => {\n    return parseInt(Math.random() * (maxNum - minNum + 1) + minNum, 10);\n};\n// 从一个全是数字的数组里随机取一个数字\nconst getValFromArr = (arr) => {\n    return arr[randomNum(0, arr.length - 1)];\n};\n// 一次掷几个\nconst roll = (num = 1) => {\n    if (!num) {\n        return 0;\n    }\n    if (num === 1) {\n        return getValFromArr(dice);\n    }\n    if (num > 1) {\n        let arr = [];\n        for (let i = 0; i < num; i++) {\n            arr.push(getValFromArr(dice));\n        }\n        return arr;\n    }\n};\n// 分数转换 getFraction(2, 4) --> 1/2\nconst getFraction = (numerator, denominator) => {\n    Fraction.fraction(numerator, denominator);\n    Fraction.toFraction();\n    return Fraction.d;\n};\nlet Fraction = {\n    a: 0,\n    b: 0,\n    d: \"\",\n    e: 0,\n    fraction: function (num1, num2) {\n        Fraction.a = num1;\n        Fraction.b = num2;\n        Fraction.appointment();\n    },\n    gcd: function (a, b) {\n        //欧几里德算法\n        return b === 0 ? a : Fraction.gcd(b, a % b);\n    },\n    appointment: function () {\n        // 约分操作 如果分子是0或分母是1就不用约分了\n        if (Fraction.a === 0 || Fraction.b === 1) return;\n        Fraction.e = Fraction.gcd(Fraction.a, Fraction.b);\n        Fraction.a /= Fraction.e;\n        Fraction.b /= Fraction.e;\n    },\n    toFraction: function () {\n        Fraction.d = Fraction.a + \"/\" + Fraction.b;\n    },\n};\nexport { roll, getFraction };\n","import React from \"react\";\nimport { roll, getFraction } from \"./utils\";\n\nclass OneByOne extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            result: [],\n            count: 0,\n            step: 2,\n        };\n        this.timer = null;\n    }\n\n    start = () => {\n        this.timer = setInterval(() => {\n            this.run();\n        });\n    };\n    run = () => {\n        const val = roll();\n        const { result, count, step } = this.state;\n        let newCount = count;\n        const next = [val, ...result];\n        if (result.length) {\n            let arr = next.slice(0, step);\n            // 连续两次都是6\n            let flag = arr.every((item) => item === 6);\n            if (flag) newCount++;\n        }\n        this.setState({\n            result: next,\n            count: newCount,\n        });\n    };\n    stop = () => {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = null;\n        }\n    };\n    componentWillUnmount() {\n        this.stop();\n    }\n\n    render() {\n        const { result, count, step } = this.state;\n        return (\n            <div className=\"OneByOne wrap\">\n                <div onClick={this.start}>start</div>\n                <div onClick={this.stop}>stop</div>\n                <div>共掷{result.length}次骰子</div>\n                <div>\n                    连续{step}次6的次数{count}\n                </div>\n                <div>\n                    <div\n                        style={{\n                            width: \"50%\",\n                            float: \"left\",\n                            textAlign: \"right\",\n                        }}\n                    >\n                        连续{step}次6的概率\n                    </div>\n                    <div\n                        style={{\n                            width: \"50%\",\n                            float: \"right\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {getFraction(count, result.length)}\n                    </div>\n                </div>\n                <ul>\n                    {result.reverse().map((item, index) => {\n                        return (\n                            <li className=\"item\" key={index}>\n                                {item}\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default OneByOne;\n","import React from \"react\";\nimport { roll, getFraction } from \"./utils\";\n\nclass ManyByOne extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            result: [],\n            count: 0,\n            // 一次扔几个骰子\n            step: 2,\n        };\n        this.timer = null;\n    }\n\n    start = () => {\n        this.timer = setInterval(() => {\n            this.run();\n        });\n    };\n    run = () => {\n        const { result, count, step } = this.state;\n        const val = roll(step);\n        let newCount = count;\n        const next = [val, ...result];\n        if (result.length) {\n            // 每个都是6\n            let flag = val.every((item) => item === 6);\n            if (flag) newCount++;\n        }\n        this.setState({\n            result: next,\n            count: newCount,\n        });\n    };\n    stop = () => {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = null;\n        }\n    };\n    componentWillUnmount() {\n        this.stop();\n    }\n\n    render() {\n        const { result, count, step } = this.state;\n        return (\n            <div className=\"ManyByOne  wrap\">\n                <div onClick={this.start}>start</div>\n                <div onClick={this.stop}>stop</div>\n                <div>共掷{result.length}次骰子</div>\n                <div>\n                    {step}个骰子都是6的次数{count}\n                </div>\n                <div>\n                    <div\n                        style={{\n                            width: \"50%\",\n                            float: \"left\",\n                            textAlign: \"right\",\n                        }}\n                    >\n                        {step}个骰子都是6的概率\n                    </div>\n                    <div\n                        style={{\n                            width: \"50%\",\n                            float: \"right\",\n                            textAlign: \"left\",\n                        }}\n                    >\n                        {getFraction(count, result.length)}\n                    </div>\n                </div>\n                <ul>\n                    {result.reverse().map((item, index) => {\n                        return (\n                            <li className=\"item\" key={index}>\n                                [\n                                {item.map((Jitem,Jindex) => {\n                                    return <span key={Jindex}>{Jitem}</span>;\n                                })}\n                                ]\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default ManyByOne;\n","import React from \"react\";\nimport OneByOne from \"./OneByOne\";\nimport ManyByOne from \"./ManyByOne\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            result: [],\n            count: 0,\n        };\n        this.timer = null;\n    }\n\n    render() {\n        const { result, count } = this.state;\n        return (\n            <div className=\"App\">\n                <OneByOne />\n                <ManyByOne />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}